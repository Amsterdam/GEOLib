INPUT FILE FOR D-SETTLEMENT
==============================================================================
COMPANY    : {{ company }}
DATE       : {{ timestamp.strftime('%d-%m-%Y') }}
TIME       : {{ timestamp.strftime('%H:%M:%S') }}
FILENAME   : {{ output_fn }}
CREATED BY : GEOLib version {{ glversion }}
==========================    BEGINNING OF DATA     ==========================
[VERSION]
{% if version is mapping %}
Soil={{ version.soil }}
Geometry={{ version.geometry }}
D-Settlement={{ version.d__settlement }}
{% else %}
{{ version }}
{% endif %}
[END OF VERSION]

[SOIL COLLECTION]
{% if soil_collection is mapping %}
{% for soil in soil_collection.soil %}
[SOIL]
{{ soil }}
[END OF SOIL]

{% endfor %}
{% else %}
{{ soil_collection }}
{% endif %}
[END OF SOIL COLLECTION]

[GEOMETRY DATA]

[ACCURACY]
{% if geometry_data.accuracy is mapping %}
        {{ geometry_data.accuracy.accuracy }}
{% else %}
{{ geometry_data.accuracy }}
{% endif %}
[END OF ACCURACY]

[POINTS]
{% if geometry_data.points is mapping %}
     {{ '{:>4}'.format( geometry_data.points.points|length) }}  - Number of geometry points -
{% for point in geometry_data.points.points %}
       {{ '{:>8}'.format(point.id) }}{{ '{:15.3f}'.format(point.X) }}{{ '{:15.3f}'.format(point.Y) }}{{ '{:15.3f}'.format(point.Z) }}
{% endfor %}
{% else %}
{{ geometry_data.points }}
{% endif %}
[END OF POINTS]

[CURVES]
{% if geometry_data.curves is mapping %}
    {{ '{:>4}'.format( geometry_data.curves.curves|length) }} - Number of curves -
{% for curve in geometry_data.curves.curves %}
    {{ '{:>6}'.format(curve.id) }} - Curve number
    {{ '{:>8}'.format(2) }} - number of points on curve,  next line(s) are pointnumbers
    {{ '{:>10}'.format(curve.points[0].id) }}{{ '{:>6}'.format(curve.points[1].id) }}
{% endfor %}
{% else %}
{{ geometry_data.curves }}
{% endif %}
[END OF CURVES]

[BOUNDARIES]
{% if geometry_data.boundaries is mapping %}
    {{ '{:>4}'.format( geometry_data.boundaries.boundaries|length ) }} - Number of boundaries -
    {% for boundary in geometry_data.boundaries.boundaries %}
        {{ '{:>6}'.format(boundary.id) }} - Curve number
        {{ '{:>8}'.format(boundary|length) }} - number of curves on boundary, next line(s) are curvenumbers
        {% if boundary.curves|length > 1 %}
            {% for curve in boundary.curves %}
                {% if loop.first %}
                    {{ '{:>10}'.format(curve.id) }}
                {% elif loop.index0 % 10 == 0 %}
                    {{ '\n' }}{{ '{:>10}'.format(curve.id) }}
                {% else %}
                    {{ '{:>6}'.format(curve.id) }}
                {% endif %}
            {% endfor %}
        {% else %}
            {{ '{:>10}'.format(boundary.curves[0].id) }}
        {% endif %}
    {% endfor %}
{% else %}
    {{ geometry_data.boundaries }}
{% endif %}

[END OF BOUNDARIES]

[USE PROBABILISTIC DEFAULTS BOUNDARIES]
{{ geometry_data.use_probabilistic_defaults_boundaries }}
[END OF USE PROBABILISTIC DEFAULTS BOUNDARIES]

[STDV BOUNDARIES]
{{ geometry_data.stdv_boundaries }}
[END OF STDV BOUNDARIES]

[DISTRIBUTION BOUNDARIES]
{{ geometry_data.distribution_boundaries }}
[END OF DISTRIBUTION BOUNDARIES]

[PIEZO LINES]
{% if geometry_data.piezo_lines is mapping %}
{{ '{:>4}'.format( geometry_data.piezo_lines.piezolines|length ) }} - Number of piezometric level lines -
{% for pl_line in geometry_data.piezo_lines.piezolines -%}
{{ '{:>6}'.format(pl_line.id) }} - PlLine number
{{ '{:>8}'.format(pl_line.curves|length) }} - number of curves on PlLine, next line(s) are curvenumbers
{% if pl_line.curves|length > 1 %}
    {%- for curve in pl_line.curves %}
        {%- if loop.first -%}
            {{ '{:>10}'.format(curve) }}
        {%- elif loop.index0 % 10 == 0 -%}
            {{ '\n' }}{{ '{:>10}'.format(curve) }}
        {%- else -%}
            {{ '{:>6}'.format(curve) }}
        {%- endif -%}
    {% endfor %}
{% else -%}
    {{ '{:>10}'.format(pl_line.curves[0]) }}
{% endif -%}
{% endfor -%}
{% else %}
{{ geometry_data.piezo_lines }}
{% endif %}

[END OF PIEZO LINES]

[PHREATIC LINE]
{% if geometry_data.phreatic_line is mapping %}
   {{ geometry_data.phreatic_line.phreaticline }} - Number of the piezometric level line acting as phreatic line -
{% else %}
{{ geometry_data.phreatic_line }}
{% endif %}
[END OF PHREATIC LINE]

[WORLD CO-ORDINATES]
{{ geometry_data.world_co__ordinates }}
[END OF WORLD CO-ORDINATES]

[LAYERS]
{% if geometry_data.layers is mapping %}
  {{ geometry_data.layers.layers|length }} - Number of layers -
{% for layer in geometry_data.layers.layers %}
{{ '{:>6}'.format(layer.id) }} - Layer number, next line is material of layer
         {{ layer.material }}
{{ '{:>10}'.format(layer.piezo_top) }} - Piezometric level line at top of layer
{{ '{:>10}'.format(layer.piezo_bottom) }} - Piezometric level line at bottom of layer
{{ '{:>10}'.format(layer.boundary_top) }} - Boundarynumber at top of layer
{{ '{:>10}'.format(layer.boundary_bottom) }} - Boundarynumber at bottom of layer
{% endfor %}
{% else %}
{{ geometry_data.layers }}
{% endif %}
[END OF LAYERS]

[LAYERLOADS]
{{ geometry_data.layerloads }}
[END OF LAYERLOADS]

[END OF GEOMETRY DATA]

[RUN IDENTIFICATION]
{{ run_identification }}
[END OF RUN IDENTIFICATION]

[MODEL]
{{ model }}
[END OF MODEL]

[VERTICALS]
{% if verticals is mapping %}
{{ verticals.total_mesh }} = total Mesh
{{ verticals.locations|length }} = number of items
{% for location in locations %}
{{ location.x}}        {{ location.z}} = X, Z
{% endfor %}
{% else %}
{{ verticals }}
{% endif %}
[END OF VERTICALS]

[WATER]
{{ water }}
[END OF WATER]

[NON-UNIFORM LOADS]
{% if non__uniform_loads.loads is mapping %}
{{ non__uniform_loads.loads|length }} = number of items
{% for name, non__uniform_load in non__uniform_loads.loads.items() %}
{{ name }}
{{ non__uniform_load.time }} {{ non__uniform_load.gammadry }} {{ non__uniform_load.gammawet }} {{ non__uniform_load.temporary }} {{ non__uniform_load.endtime }} = Time, Gamma dry, Gamma wet, Temporary, Endtime
{{ non__uniform_load.points|length }} = Number of co-ordinates
    {% for point in non__uniform_load.points %}
        {{ point.X }} {{ point.Y }} = X, Y
    {% endfor %}
{% endfor %}
{% else %}
{{ non__uniform_loads }}
{% endif %}
[END OF NON-UNIFORM LOADS]

[WATER LOADS]
{{ water_loads }}
[END OF WATER LOADS]

[OTHER LOADS]
{% if other_loads.loads is mapping %}
{{ other_loads.loads|length }} = number of items
{% for name, load in other_loads.loads.items() %}
{{ name }}
{% if load.load_type.value == 0 %}
0 : Trapeziform
{{ load.time }} {{ load.load_values_trapeziform.gamma }} {{ load.load_values_trapeziform.height }} = Time, Gamma, H
{{ load.load_values_trapeziform.xl }} {{ load.load_values_trapeziform.xm }} {{ load.load_values_trapeziform.xr }} {{ load.load_values_trapeziform.Xp }} {{ load.load_values_trapeziform.Yp }}  = xl, xm, xr, Xp, Yp
{% endif %}
{% if load.load_type.value == 1 %}
1 : Circular
{{ load.time }} {{ load.load_values_circular.weight }} {{ load.load_values_circular.alpha }} = Time, Weight, Alpha
{{ load.load_values_circular.Xcp }} {{ load.load_values_circular.Ycp }} {{ load.load_values_circular.Zcp }} {{ load.load_values_circular.R }} = Xcp, Ycp, Zcp, R
{% endif %}
{% if load.load_type.value == 2 %}
2 : Rectangular
{{ load.time }} {{ load.load_values_rectangular.weight }} {{ load.load_values_rectangular.alpha }} = Time, Weight, Alpha
{{ load.load_values_rectangular.Xcp }} {{ load.load_values_rectangular.Ycp }} {{ load.load_values_rectangular.Zcp }} {{ load.load_values_rectangular.xwidth }} {{ load.load_values_rectangular.zwidth }} = Xcp, Ycp, Zcp, xwidth, zwidth
{% endif %}
{% if load.load_type.value == 3 %}
3 : Uniform
{{ load.time }} {{ load.load_values_uniform.gamma }} {{ load.load_values_uniform.height }} {{ load.load_values_uniform.y_application }} = Time, Gamma, H, Yapplication
{% endif %}
{% if load.load_type.value == 4 %}
4 : Tank
{{ load.time }} {{ load.load_values_tank.gamma }} {{ load.load_values_tank.wallheight }} {{ load.load_values_tank.interalweight }} {{ load.load_values_tank.alpha }} = Time, WallWeight, InternalWeight, Alpha
{{ load.load_values_tank.Xcp }} {{ load.load_values_tank.Ycp }} {{ load.load_values_tank.Zcp }} {{ load.load_values_tank.Rintern }} {{ load.load_values_tank.dWall }}= Xcp, Ycp, Zcp, Rintern, DWall
{% endif %}
{% endfor %}
{% else %}
{{ other_loads }}
{% endif %}
[END OF OTHER LOADS]

[CALCULATION OPTIONS]
{{ calculation_options }}
[END OF CALCULATION OPTIONS]

[RESIDUAL TIMES]
{% if residual_times is mapping %}
{{ residual_times.time_steps | length }} : Number of items
{% for time_step in residual_times.time_steps %}
    {{ time_step }}
{% endfor %}
{% else %}
{{ residual_times }}
{% endif %}
[END OF RESIDUAL TIMES]

[FILTER BAND WIDTH]
{{ filter_band_width }}
[END OF FILTER BAND WIDTH]

[PORE PRESSURE METERS]
{{ pore_pressure_meters }}
[END OF PORE PRESSURE METERS]

[NON-UNIFORM LOADS PORE PRESSURES]
{{ non__uniform_loads_pore_pressures }}
[END OF NON-UNIFORM LOADS PORE PRESSURES]

[OTHER LOADS PORE PRESSURES]
{{ other_loads_pore_pressures }}
[END OF OTHER LOADS PORE PRESSURES]

[CALCULATION OPTIONS PORE PRESSURES]
{{ calculation_options_pore_pressures }}
[END OF CALCULATION OPTIONS PORE PRESSURES]

[VERTICAL DRAIN]
{{ vertical_drain }}
[END OF VERTICAL DRAIN]

[PROBABILISTIC DATA]
{{ probabilistic_data }}
[END OF PROBABILISTIC DATA]

[PROBABILISTIC DEFAULTS]
{{ probabilistic_defaults }}
[END OF PROBABILISTIC DEFAULTS]

[FIT OPTIONS]
{{ fit_options }}
[END OF FIT OPTIONS]

[FIT CALCULATION]
{{ fit_calculation }}
[END OF FIT CALCULATION]

[EPS]
{{ eps }}
[END OF EPS]

[FIT]
{{ fit }}
[END OF FIT]

[END OF INPUT FILE]
